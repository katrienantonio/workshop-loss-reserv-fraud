incremental_triangle(observed_data,
variable = 'payment',
lower_na = TRUE)
cumulative_triangle(observed_data,
variable = 'payment')
# diy approach to chainladder:
triangle <- cumulative_triangle(observed_data, variable = 'size')
l <- nrow(triangle)
## compute development factors
f <- rep(0, l-1)
for(j in 1:(l-1)) {
f[j] <- sum(triangle[1:(l-j), j+1]) / sum(triangle[1:(l-j), j])
}
f
## complete the triangle
triangle_completed <- triangle
for(j in 2:l) {
triangle_completed[l:(l-j+2), j] <- triangle_completed[l:(l-j+2), j-1] * f[j-1]
}
triangle_completed
## cumulative to incremental triangle
cbind(triangle_completed[, 1],
t(apply(triangle_completed, 1, diff)))
## cum2incr using the {ChainLadder} package
require(ChainLadder)
cum2incr(triangle_completed)
## calculating the reserve estimate
triangle_completed_incr <- cum2incr(triangle_completed)
lower_triangle <- row(triangle_completed_incr) + col(triangle_completed_incr) > l+1
lower_triangle
reserve_cl <- sum(triangle_completed_incr[lower_triangle])
tri <- incremental_triangle(observed_data,
variable = 'payment',
lower_na = TRUE)
view(tri)
require(ChainLadder)
triangle <- cumulative_triangle(observed_data, variable = 'size')
MackChainLadder(triangle)
cl <- MackChainLadder(triangle)
cl
cl$f
reduction_period <- format(claim_data$accident_date, '%m') %in% c('07', '08')
reduction_period
keep_claim[reduction_period] <- runif(sum(reduction_period)) > 0.5
# Creating the Corona data set
set.seed(1)
keep_claim <- rep(TRUE, nrow(claim_data))
reduction_period <- format(claim_data$accident_date, '%m') %in% c('07', '08')
keep_claim[reduction_period] <- runif(sum(reduction_period)) > 0.5
claims <- claim_data$accident_number[keep_claim]
individual_data_seasonal <- individual_data %>%
filter(accident_number %in% claims)
individual_data_seasonal <- individual_data %>%
filter(accident_number %in% claims)
observed_data_seasonal <- observed_data %>%
filter(accident_number %in% claims)
unobserved_data_seasonal <- unobserved_data %>%
filter(accident_number %in% claims)
unobserved_data_seasonal
plot(cl)
# Creating a Seasonal data set
set.seed(1)
keep_claim <- rep(TRUE, nrow(claim_data))
reduction_period <- format(claim_data$accident_date, '%m') %in% c('07', '08')
keep_claim[reduction_period] <- runif(sum(reduction_period)) > 0.5
claims <- claim_data$accident_number[keep_claim]
individual_data_seasonal <- individual_data %>%
filter(accident_number %in% claims)
observed_data_seasonal <- observed_data %>%
filter(accident_number %in% claims)
unobserved_data_seasonal <- unobserved_data %>%
filter(accident_number %in% claims)
triangle_size <- incremental_triangle(observed_data_seasonal, 'size')
cl <- MackChainLadder(triangle_size)
triangle_size <- incremental_triangle(observed_data_seasonal, variable = 'size')
cl <- MackChainLadder(triangle_size)
triangle_size
cl <- MackChainLadder(triangle_size)
view(triangle_size)
?MackChainLadder
cl <- MackChainLadder(triangle_size, est.sigma = 'Mack')
set.seed(1)
keep_claim <- rep(TRUE, nrow(claim_data))
reduction_period <- format(claim_data$accident_date, '%m') %in% c('07', '08')
keep_claim[reduction_period] <- runif(sum(reduction_period)) > 0.75
claims <- claim_data$accident_number[keep_claim]
individual_data_seasonal <- individual_data %>%
filter(accident_number %in% claims)
observed_data_seasonal <- observed_data %>%
filter(accident_number %in% claims)
unobserved_data_seasonal <- unobserved_data %>%
filter(accident_number %in% claims)
triangle_size <- incremental_triangle(observed_data_seasonal, variable = 'size')
cl <- MackChainLadder(triangle_size, est.sigma = 'Mack')
set.seed(1)
keep_claim <- rep(TRUE, nrow(claim_data))
reduction_period <- format(claim_data$accident_date, '%m') %in% c('07', '08')
keep_claim[reduction_period] <- runif(sum(reduction_period)) > .25
claims <- claim_data$accident_number[keep_claim]
individual_data_seasonal <- individual_data %>%
filter(accident_number %in% claims)
observed_data_seasonal <- observed_data %>%
filter(accident_number %in% claims)
unobserved_data_seasonal <- unobserved_data %>%
filter(accident_number %in% claims)
triangle_size <- incremental_triangle(observed_data_seasonal, variable = 'size')
cl <- MackChainLadder(triangle_size, est.sigma = 'Mack')
set.seed(1)
keep_claim <- rep(TRUE, nrow(claim_data))
reduction_period <- format(claim_data$accident_date, '%m') %in% c('07', '08')
keep_claim[reduction_period] <- runif(sum(reduction_period)) > 0
claims <- claim_data$accident_number[keep_claim]
individual_data_seasonal <- individual_data %>%
filter(accident_number %in% claims)
observed_data_seasonal <- observed_data %>%
filter(accident_number %in% claims)
unobserved_data_seasonal <- unobserved_data %>%
filter(accident_number %in% claims)
triangle_size <- incremental_triangle(observed_data_seasonal, variable = 'size')
cl <- MackChainLadder(triangle_size, est.sigma = 'Mack')
cl$
set.seed(1)
keep_claim <- rep(TRUE, nrow(claim_data))
reduction_period <- format(claim_data$accident_date, '%m') %in% c('07', '08')
keep_claim[reduction_period] <- runif(sum(reduction_period)) > 0.5
claims <- claim_data$accident_number[keep_claim]
individual_data_seasonal <- individual_data %>%
filter(accident_number %in% claims)
observed_data_seasonal <- observed_data %>%
filter(accident_number %in% claims)
unobserved_data_seasonal <- unobserved_data %>%
filter(accident_number %in% claims)
triangle_size <- cumulative_triangle(observed_data_seasonal, variable = 'size')
cl <- MackChainLadder(triangle_size)
cl$f
cl
ultimate <- sum(cum2incr(cl$FullTriangle))
already_paid <- sum(cum2incr(cl$Triangle), na.rm = TRUE)
reserve_covid_cl <-  ultimate - already_paid
reserve_covid_cl
reserve_cl <-  ultimate - already_paid
reserve_actual <- sum(unobserved$size)
reserve_actual <- sum(unobserved_data_seasonal$size)
reserve_actual
reserve_cl
# Chain Ladder
triangle_size <- cumulative_triangle(observed_data_seasonal, variable = 'size')
cl <- MackChainLadder(triangle_size)
cl$f
ultimate <- sum(cum2incr(cl$FullTriangle))
already_paid <- sum(cum2incr(cl$Triangle), na.rm = TRUE)
reserve_cl <-  ultimate - already_paid
reserve_actual <- sum(unobserved_data_seasonal$size)
reserve_cl
reserve_actual
data.frame(reserve_actual, reserve_seasonal, pct_error = (reserve_seasonal / reserve_actual - 1) * 100)
ultimate <- sum(cum2incr(cl$FullTriangle))
already_paid <- sum(cum2incr(cl$Triangle), na.rm = TRUE)
reserve_cl <-  ultimate - already_paid
reserve_actual <- sum(unobserved_data_seasonal$size)
data.frame(reserve_actual, reserve_seasonal, pct_error = (reserve_cl / reserve_actual - 1) * 100)
data.frame(reserve_actual, reserve_cl, pct_error = (reserve_cl / reserve_actual - 1) * 100)
observed_data_seasonal_year <- observed_data_seasonal %>%
filter(accident_year >= start_period) %>%
mutate(accident_year = period_to_year(accident_period, start_period),
development_year = period_to_year(development_period, start_period)) %>%
group_by(accident_year, development_year) %>%
summarise(size = sum(size),
payment = size > 0)
# quarter to yearly periods --> a new year starts in June!
start_period <- 0.5 # 0.5 = third quarter
period_to_year <- function(period, start) {
year <- floor(period - start)
}
observed_data_seasonal_year <- observed_data_seasonal %>%
filter(accident_year >= start_period) %>%
mutate(accident_year = period_to_year(accident_period, start_period),
development_year = period_to_year(development_period, start_period)) %>%
group_by(accident_year, development_year) %>%
summarise(size = sum(size),
payment = size > 0)
observed_data_seasonal_year <- observed_data_seasonal %>%
filter(accident_period >= start_period) %>%
mutate(accident_year = period_to_year(accident_period, start_period),
development_year = period_to_year(development_period, start_period)) %>%
group_by(accident_year, development_year) %>%
summarise(size = sum(size),
payment = size > 0)
observed_data_seasonal_year
min(observed_data_seasonal$accident_period)
min(observed_data_seasonal$development_period)
observed_data_seasonal_year <- observed_data_seasonal %>%
filter(accident_period >= start_period) %>%
mutate(accident_year = period_to_year(accident_period, start_period),
development_year = period_to_year(development_period, start_period) + 1) %>%
group_by(accident_year, development_year) %>%
summarise(size = sum(size),
payment = size > 0)
observed_data_seasonal_year <- observed_data_seasonal %>%
filter(accident_period >= start_period) %>%
mutate(accident_year = period_to_year(accident_period, start_period),
calendar_year = period_to_year(calendar_period, start_period),
development_year = calendar_year - accident_year) %>%
group_by(accident_year, development_year) %>%
summarise(size = sum(size),
payment = size > 0)
observed_data_seasonal_year
observed_data_seasonal_year <- observed_data_seasonal %>%
filter(accident_period >= start_period) %>%
mutate(accident_year = period_to_year(accident_period, start_period),
calendar_year = period_to_year(calendar_period, start_period),
development_year = calendar_year - accident_year) %>%
group_by(claim_number, development_year) %>%
summarise(size = sum(size),
payment = size > 0)
observed_data_seasonal_year
observed_data_seasonal
observed_data_seasonal_year <- observed_data_seasonal %>%
filter(accident_period >= start_period) %>%
mutate(accident_year = period_to_year(accident_period, start_period),
calendar_year = period_to_year(calendar_period, start_period),
development_year = calendar_year - accident_year) %>%
group_by(accident_number, accident_year, development_year) %>%
summarise(size = sum(size),
payment = size > 0)
observed_data_seasonal_year
table(observed_data_seasonal_year$development_year)
incremental_triangle(observed_data_seasonal_year,
rows = 'accident_year',
cols = 'development_year',
variable = 'size',
step = 1)
incremental_triangle
incremental_triangle(observed_data_seasonal_year,
rows = 'accident_year',
columns  = 'development_year',
variable = 'size',
step = 1)
max(observed_data_seasonal_year$calendar_year)
max(observed_data_seasonal_year$accident_year)
max(observed_data_seasonal_year$development_year)
min(observed_data_seasonal_year$development_year)
min(observed_data_seasonal_year$accident_year)
observed_data_seasonal_year <- observed_data_seasonal %>%
mutate(accident_year = period_to_year(accident_period, start_period),
calendar_year = period_to_year(calendar_period, start_period),
development_year = calendar_year - accident_year) %>%
filter(accident_period >= start_period,
development_year <= max(accident_year)) %>%
group_by(accident_number, accident_year, development_year) %>%
summarise(size = sum(size),
payment = size > 0)
incremental_triangle(observed_data_seasonal_year,
rows = 'accident_year',
columns  = 'development_year',
variable = 'size',
step = 1)
triangle_size <- incremental_triangle(observed_data_seasonal_year,
rows = 'accident_year',
columns  = 'development_year',
variable = 'size',
step = 1)
cl_year <- MackChainLadder(triangle_size)
triangle_size <- cumulative_triangle(observed_data_seasonal_year,
rows = 'accident_year',
columns  = 'development_year',
variable = 'size',
step = 1)
cl_year <- MackChainLadder(triangle_size)
triangle_size <- cumulative_triangle(observed_data_seasonal_year,
rows = 'accident_year',
columns  = 'development_year',
variable = 'size',
step = 1)
# More sophisticated function to create incremental triangles:
## rows: aggregation variable for the rows
## columns: aggregation variable for the columns
## variable: variable that will be aggregated in the cells of the triangle
## lower_na: fill the lower triangle with NA's
incremental_triangle <- function(data,
rows = 'accident_period',
columns = 'development_period',
variable = 'size',
lower_na = TRUE,
step = .25) {
data_triangle <- data %>%
group_by(!!sym(rows), !!sym(columns)) %>%
summarise(value = sum(!!sym(variable))) %>%
ungroup()
n <- max(data_triangle[, rows]) / step + 1
triangle <- matrix(0, nrow = n, ncol = n)
triangle[cbind(data_triangle[[rows]]/step+1, data_triangle[[columns]]/step+1)] <- data_triangle$value
if(lower_na) {
triangle[row(triangle) + col(triangle) > n+1] <- NA
}
return(triangle)
}
cumulative_triangle <- function(data,
rows = 'accident_period',
columns = 'development_period',
variable = 'size',
lower_na = TRUE,
step = .25) {
incremental <- incremental_triangle(data, rows, columns, variable, lower_na)
t(apply(incremental, 1, cumsum))
}
cumulative_triangle <- function(data,
rows = 'accident_period',
columns = 'development_period',
variable = 'size',
lower_na = TRUE,
step = .25) {
incremental <- incremental_triangle(data, rows, columns, variable, lower_na, step)
t(apply(incremental, 1, cumsum))
}
# quarter to yearly periods --> a new year starts in June!
start_period <- 0.5 # 0.5 = third quarter
period_to_year <- function(period, start) {
year <- floor(period - start)
}
observed_data_seasonal_year <- observed_data_seasonal %>%
mutate(accident_year = period_to_year(accident_period, start_period),
calendar_year = period_to_year(calendar_period, start_period),
development_year = calendar_year - accident_year) %>%
filter(accident_period >= start_period,
development_year <= max(accident_year)) %>%
group_by(accident_number, accident_year, development_year) %>%
summarise(size = sum(size),
payment = size > 0)
triangle_size <- cumulative_triangle(observed_data_seasonal_year,
rows = 'accident_year',
columns  = 'development_year',
variable = 'size',
step = 1)
cl_year <- MackChainLadder(triangle_size)
cl$f
cl_year$f
ultimate <- sum(cum2incr(cl_year$FullTriangle))
already_paid <- sum(cum2incr(cl_year$Triangle), na.rm = TRUE)
reserve_cl_year <-  ultimate - already_paid
data.frame(reserve_actual,
reserve_cl_quarter = reserve_cl,
pct_error_quarter = (reserve_cl / reserve_actual - 1) * 100,
reserve_cl_year,
pct_error_year = (reserve_cl_year / reserve_actual - 1) * 100)
cl_year <- MackChainLadder(triangle_size)
cl_year
triangle_size
set.seed(1)
keep_claim <- rep(TRUE, nrow(claim_data))
reduction_period <- format(claim_data$accident_date, '%m') %in% c('07', '08')
keep_claim[reduction_period] <- runif(sum(reduction_period)) > 0.5
claims <- claim_data$accident_number[keep_claim]
individual_data_seasonal <- individual_data %>%
filter(accident_number %in% claims)
observed_data_seasonal <- observed_data %>%
filter(accident_number %in% claims)
unobserved_data_seasonal <- unobserved_data %>%
filter(accident_number %in% claims)
# Chain Ladder
triangle_size <- cumulative_triangle(observed_data_seasonal, variable = 'size')
cl <- MackChainLadder(triangle_size)
cl$f
ultimate <- sum(cum2incr(cl$FullTriangle))
already_paid <- sum(cum2incr(cl$Triangle), na.rm = TRUE)
reserve_cl <-  ultimate - already_paid
reserve_actual <- sum(unobserved_data_seasonal$size)
reserve_actual
reserve_cl
triangle <- cumulative_triangle(observed_data, variable = 'size')
cl <- MackChainLadder(triangle)
cl
cl$f
sum(unobserved_data$size)
## The RBNS reserve is much larger than the IBNR reserve
unobserved_data %>%
mutate(reported = (reporting_period <= 9.5)) %>%
group_by(reported) %>%
summarise(reserve = sum(size))
# censoring:
observed_data <- individual_data %>%
filter(calendar_period >= reporting_period,
calendar_period <= 9.5)
unobserved_data <- individual_data %>%
filter(calendar_period > 9.5)
# IBNR and RBNS:
reserve_actual <- sum(unobserved_data$size)
reserve_actual
## The RBNS reserve is much larger than the IBNR reserve
unobserved_data %>%
mutate(reported = (reporting_period <= 9.5)) %>%
group_by(reported) %>%
summarise(reserve = sum(size))
table(observed_data$calendar_period)
table(observed_data$accident_period)
# censoring:
observed_data <- individual_data %>%
filter(calendar_period >= reporting_period,
calendar_period <= 9.25)
unobserved_data <- individual_data %>%
filter(calendar_period > 9.25)
# IBNR and RBNS:
reserve_actual <- sum(unobserved_data$size)
reserve_actual
## The RBNS reserve is much larger than the IBNR reserve
unobserved_data %>%
mutate(reported = (reporting_period <= 9.5)) %>%
group_by(reported) %>%
summarise(reserve = sum(size))
# More sophisticated function to create incremental triangles:
## rows: aggregation variable for the rows
## columns: aggregation variable for the columns
## variable: variable that will be aggregated in the cells of the triangle
## lower_na: fill the lower triangle with NA's
incremental_triangle <- function(data,
rows = 'accident_period',
columns = 'development_period',
variable = 'size',
lower_na = TRUE,
step = .25) {
data_triangle <- data %>%
group_by(!!sym(rows), !!sym(columns)) %>%
summarise(value = sum(!!sym(variable))) %>%
ungroup()
n <- max(data_triangle[, rows]) / step + 1
triangle <- matrix(0, nrow = n, ncol = n)
triangle[cbind(data_triangle[[rows]]/step+1, data_triangle[[columns]]/step+1)] <- data_triangle$value
if(lower_na) {
triangle[row(triangle) + col(triangle) > n+1] <- NA
}
return(triangle)
}
cumulative_triangle <- function(data,
rows = 'accident_period',
columns = 'development_period',
variable = 'size',
lower_na = TRUE,
step = .25) {
incremental <- incremental_triangle(data, rows, columns, variable, lower_na, step)
t(apply(incremental, 1, cumsum))
}
tri <- incremental_triangle(observed_data,
variable = 'payment',
lower_na = TRUE)
view(tri)
cumulative_triangle(observed_data,
variable = 'payment')
require(ChainLadder)
triangle <- cumulative_triangle(observed_data, variable = 'size')
cl <- MackChainLadder(triangle)
cl
cl$f
# Creating a Seasonal data set
set.seed(1)
keep_claim <- rep(TRUE, nrow(claim_data))
reduction_period <- format(claim_data$accident_date, '%m') %in% c('07', '08')
keep_claim[reduction_period] <- runif(sum(reduction_period)) > 0.5
claims <- claim_data$accident_number[keep_claim]
individual_data_seasonal <- individual_data %>%
filter(accident_number %in% claims)
observed_data_seasonal <- observed_data %>%
filter(accident_number %in% claims)
unobserved_data_seasonal <- unobserved_data %>%
filter(accident_number %in% claims)
# Chain Ladder
triangle_size <- cumulative_triangle(observed_data_seasonal, variable = 'size')
cl <- MackChainLadder(triangle_size)
cl$f
ultimate <- sum(cum2incr(cl$FullTriangle))
already_paid <- sum(cum2incr(cl$Triangle), na.rm = TRUE)
reserve_cl <-  ultimate - already_paid
reserve_actual <- sum(unobserved_data_seasonal$size)
data.frame(reserve_actual, reserve_cl, pct_error = (reserve_cl / reserve_actual - 1) * 100)
# quarter to yearly periods --> a new year starts in June!
start_period <- 0.5 # 0.5 = third quarter
period_to_year <- function(period, start) {
year <- floor(period - start)
}
observed_data_seasonal_year <- observed_data_seasonal %>%
mutate(accident_year = period_to_year(accident_period, start_period),
calendar_year = period_to_year(calendar_period, start_period),
development_year = calendar_year - accident_year) %>%
filter(accident_period >= start_period,
development_year <= max(accident_year)) %>%
group_by(accident_number, accident_year, development_year) %>%
summarise(size = sum(size),
payment = size > 0)
triangle_size <- cumulative_triangle(observed_data_seasonal_year,
rows = 'accident_year',
columns  = 'development_year',
variable = 'size',
step = 1)
cl_year <- MackChainLadder(triangle_size)
cl_year$f
ultimate <- sum(cum2incr(cl_year$FullTriangle))
already_paid <- sum(cum2incr(cl_year$Triangle), na.rm = TRUE)
reserve_cl_year <-  ultimate - already_paid
data.frame(reserve_actual,
reserve_cl_quarter = reserve_cl,
pct_error_quarter = (reserve_cl / reserve_actual - 1) * 100,
reserve_cl_year,
pct_error_year = (reserve_cl_year / reserve_actual - 1) * 100)
require(ChainLadder)
triangle <- cumulative_triangle(observed_data, variable = 'size')
cl <- MackChainLadder(triangle)
cl
cl$f
ultimate <- sum(cum2incr(cl$FullTriangle))
already_paid <- sum(cum2incr(cl$Triangle), na.rm = TRUE)
reserve_cl <-  ultimate - already_paid
reserve_actual <- sum(unobserved_data_seasonal$size)
data.frame(reserve_actual, reserve_cl, pct_error = (reserve_cl / reserve_actual - 1) * 100)
