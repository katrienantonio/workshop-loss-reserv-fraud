reserve_actual
# Chunk 15
unobserved_yearly %>%
mutate(reported = (reporting_year <= 10)) %>%
group_by(reported) %>%
summarise(reserve = sum(size))
# Chunk 17
observed_yearly %>%
group_by(accident_year, development_year) %>%
summarise(value = sum(size)) %>%
pivot_wider(values_from = value, names_from = development_year, names_prefix = 'DY.')
# Chunk 18
incremental_triangle <- function(data,
rows = 'accident_year',
columns = 'development_year',
variable = 'size',
lower_na = TRUE) {
data_triangle <- data %>%
group_by(!!sym(rows), !!sym(columns)) %>%
summarise(value = sum(!!sym(variable))) %>%
ungroup()
n <- max(data_triangle[, rows])+1
triangle <- matrix(0, nrow = n, ncol = n)
triangle[cbind(data_triangle[[rows]]+1, data_triangle[[columns]])] <- data_triangle$value
if(lower_na) {
triangle[row(triangle) + col(triangle) > n+1] <- NA
}
return(triangle)
}
cumulative_triangle <- function(data,
rows = 'accident_year',
columns = 'development_year',
variable = 'size',
lower_na = TRUE) {
incremental <- incremental_triangle(data, rows, columns, variable, lower_na)
t(apply(incremental, 1, cumsum))
}
# Chunk 20
incremental_triangle(observed_yearly,
variable = 'payment',
lower_na = TRUE)
# Chunk 22
incremental_triangle(observed_yearly,
variable = 'size',
lower_na = TRUE)
# Chunk 24
incremental_triangle(observed_yearly,
variable = 'size',
lower_na = TRUE)
# Chunk 26
cumulative_triangle(observed_yearly,
variable = 'size',
lower_na = TRUE)
# Chunk 27
triangle <- cumulative_triangle(observed_yearly, variable = 'size')
l <- nrow(triangle)
f <- rep(0, l-1)
for(j in 1:(l-1)) {
f[j] <- sum(triangle[1:(l-j), j+1]) / sum(triangle[1:(l-j), j])
}
f
# Chunk 28
triangle_completed <- triangle
for(j in 2:l) {
triangle_completed[l:(l-j+2), j] <- triangle_completed[l:(l-j+2), j-1] * f[j-1]
}
# Chunk 30
triangle_completed
# Chunk 32
require(ChainLadder)
cum2incr(triangle_completed)
# Chunk 33
triangle_completed_incr <- cum2incr(triangle_completed)
lower_triangle <- row(triangle_completed_incr) + col(triangle_completed_incr) > l+1
reserve_cl <- sum(triangle_completed_incr[lower_triangle])
data.frame(reserve_cl = reserve_cl,
reserve_actual = reserve_actual,
difference = reserve_cl - reserve_actual,
relative_difference_pct = (reserve_cl - reserve_actual) / reserve_actual * 100)
# Chunk 35
require(ChainLadder)
triangle <- cumulative_triangle(observed_yearly, variable = 'size')
MackChainLadder(triangle)
yearly_cl_sigma = (MackChainLadder(triangle))$Total.Mack.S.E
# Chunk 36
triangle <- incremental_triangle(observed_yearly,
variable = 'size')
triangle_long <- data.frame(
occ.year = as.numeric(row(triangle)),
dev.year = as.numeric(col(triangle)),
size = as.numeric(triangle))
# Chunk 37
head(triangle_long)
# Chunk 38
fit <- glm(size ~ factor(occ.year) + factor(dev.year),
data = triangle_long,
family = poisson(link = log))
# Chunk 40
summary(fit)
# Chunk 42
lower_triangle <- triangle_long$occ.year +
triangle_long$dev.year > l + 1
triangle_long$size[lower_triangle] <-
predict(fit, newdata = triangle_long[lower_triangle, ], type = 'response')
triangle_long %>%
pivot_wider(values_from = size,
names_from = dev.year,
names_prefix = 'DY.')
# Chunk 43
reserve_glm <- sum(triangle_long$size[lower_triangle])
reserve_glm
# Chunk 44
payment_actual <- sum(unobserved_yearly$payment)
payment_actual
# Chunk 45
triangle <- cumulative_triangle(observed_yearly,
variable = 'payment')
# Chunk 46
triangle
# Chunk 48
require(ChainLadder)
cl <- MackChainLadder(triangle)
cl
# Chunk 49
ultimate <- sum(cum2incr(cl$FullTriangle))
already_paid <- sum(cum2incr(cl$Triangle), na.rm = TRUE)
payment_cl <-  ultimate - already_paid
sigma_cl <- as.numeric(cl$Total.Mack.S.E)
error = payment_actual - payment_cl
round(c(error = error,
pct_error = error / payment_actual * 100,
std.dev = error / sigma_cl),2)
# Chunk 50
incremental_triangle(rbind(observed_yearly, unobserved_yearly),
variable = 'payment',
lower_na = FALSE)
# Chunk 51
cum2incr(cl$FullTriangle)
# Chunk 53
triangle_open <- incremental_triangle(
observed_yearly %>%
mutate(open = calendar_year <= settlement_year),
variable = 'open')
triangle_open
# Chunk 55
triangle_open_end <- incremental_triangle(
observed_yearly %>%
mutate(open_end = (calendar_year <= settlement_year) & (close == 0)),
variable = 'open_end')
triangle_open_end
# Chunk 57
triangle_payment <- incremental_triangle(
observed_yearly,
variable = 'payment')
triangle_payment / triangle_open
# Chunk 59
triangle_size <- incremental_triangle(
observed_yearly,
variable = 'size')
triangle_size / triangle_payment
# Chunk 61
claims<- observed_daily %>%
group_by(accident_number) %>%
slice(1) %>%
ungroup()
occ_intensity <- claims %>%
group_by(accident_date) %>%
summarise(count = n())
require(zoo)
occ_intensity$moving_average <-
rollmean(occ_intensity$count, 30, na.pad = TRUE)
ggplot(occ_intensity) +
theme_bw() +
geom_point(aes(x = accident_date, y = count)) +
geom_line(aes(x = accident_date, y = moving_average),
size = 1, color = 'blue') +
ggtitle('Evolution of claim frequency')
# Chunk 63
require(lubridate)
claims <- claims %>%
mutate(start_year = floor_date(accident_date, unit = 'year'),
time = as.numeric(accident_date - start_year) / 366,
accident_year = year(accident_date),
reporting_year = year(reporting_date)) %>%
filter(accident_year == reporting_year)
ggplot(claims) +
theme_bw() +
geom_density(aes(x = time,
group = factor(accident_year),
color = factor(accident_year)))
# Chunk 65
require(lubridate)
claims <- observed_daily %>%
group_by(accident_number) %>%
slice(1) %>%
ungroup() %>%
mutate(start_month = floor_date(accident_date, unit = 'month'),
time = as.numeric(accident_date - start_month) / 31,
accident_month = format(accident_date, '%Y%m'),
reporting_month = format(reporting_date, '%Y%m')) %>%
filter(accident_month == reporting_month)
ggplot(claims) +
theme_bw() +
geom_density(aes(x = time,
group = factor(accident_month),
color = factor(accident_month))) +
theme(legend.position = 'none')
# Chunk 66
triangle_month <- observed_daily %>%
mutate(accident_month = year(accident_date)*12 + month(accident_date) - 2010*12,
development_month = year(payment_date)*12 + month(payment_date) - 2010*12 - accident_month) %>%
group_by(accident_month, development_month) %>%
summarise(size = sum(payment_size)) %>%
ungroup() %>%
complete(expand.grid(accident_month = 1:132, development_month = 0:131), fill = list(size = 0)) %>%
mutate(size = ifelse(accident_month + development_month > 132, NA, size)) %>%
arrange(development_month) %>%
pivot_wider(names_from = development_month, values_from = size) %>%
arrange(accident_month)
triangle_month <- as.matrix(triangle_month[, 2:132])
# Chunk 68
cl <- MackChainLadder(incr2cum(triangle_month))
reserve_cl_month = 1923172.57
result <- data.frame(method = c('Yearly chain ladder', 'Monthly chain ladder'),
`reserve estimate` = c(reserve_cl, reserve_cl_month),
error = c(reserve_cl - reserve_actual, reserve_cl_month - reserve_actual),
`pct error` = c((reserve_cl - reserve_actual) / reserve_actual * 100,(reserve_cl_month - reserve_actual) / reserve_actual * 100))
cl
output <- print(cl)
output
class(output)
cat(cl)
print(cl[[2]])
(3)
(debugonce(print); print(cl))
{debugonce(print) print(cl)}
x <- debugonce(print)
Q
getS3method("print", "list")
getS3method("print", class(cl))
summary(cl)
summary(cl)$Totals
132*132/2
(11+1)/*11/2
(11+1)*11/2
11*11
133*132/2
claims <- observed_daily %>%
group_by(accident_number) %>%
slice(1) %>%
ungroup() %>%
mutate(start_month = floor_date(accident_date, unit = 'month'),
time = as.numeric(accident_date - start_month) / 31,
accident_month = format(accident_date, '%Y%m'),
reporting_month = format(reporting_date, '%Y%m'),
month = format(accident_month, '%B')) %>%
filter(accident_month == reporting_month)
claims <- observed_daily %>%
group_by(accident_number) %>%
slice(1) %>%
ungroup() %>%
mutate(start_month = floor_date(accident_date, unit = 'month'),
time = as.numeric(accident_date - start_month) / 31,
accident_month = format(accident_date, '%Y%m'),
reporting_month = format(reporting_date, '%Y%m'),
month = format(accident_date, '%B')) %>%
filter(accident_month == reporting_month)
ggplot(claims) +
geom_facet( ~ month) +
theme_bw() +
geom_density(aes(x = time,
group = factor(accident_month),
color = factor(accident_month))) +
theme(legend.position = 'none')
ggplot(claims) +
facet_grid( ~ month) +
theme_bw() +
geom_density(aes(x = time,
group = factor(accident_month),
color = factor(accident_month))) +
theme(legend.position = 'none')
ggplot(claims) +
facet_grid( ~ month, scales = 'free', ncol = 4) +
theme_bw() +
geom_density(aes(x = time,
group = factor(accident_month),
color = factor(accident_month))) +
theme(legend.position = 'none')
ggplot(claims) +
facet_wrap( ~ month, scales = 'free', ncol = 4) +
theme_bw() +
geom_density(aes(x = time,
group = factor(accident_month),
color = factor(accident_month))) +
theme(legend.position = 'none')
ggplot(claims) +
facet_wrap( ~ month, scales = 'free', ncol = 3) +
theme_bw() +
geom_density(aes(x = time,
group = factor(accident_month),
color = factor(accident_month))) +
theme(legend.position = 'none')
ggplot(claims) +
facet_wrap( ~ month, ncol = 3) +
theme_bw() +
geom_density(aes(x = time,
group = factor(accident_month),
color = factor(accident_month)))
claims <- observed_daily %>%
group_by(accident_number) %>%
slice(1) %>%
ungroup() %>%
mutate(start_month = floor_date(accident_date, unit = 'month'),
time = as.numeric(accident_date - start_month) / 31,
accident_year = format(accident_date, '%Y'),
reporting_year = format(reporting_date, '%Y'),
month = format(accident_date, '%B')) %>%
filter(accident_year == reporting_year)
ggplot(claims) +
facet_wrap( ~ month, ncol = 3) +
theme_bw() +
geom_density(aes(x = time,
group = factor(accident_year),
color = factor(accident_year)))
reserving_yearly
head(reserving_yearly)
reserving_yearly <- reserving_yearly %>%
left_join(reserving_daily %>%
group_by(accident_number) %>%
slice(1) %>%
ungroup() %>%
select(accident_number, accident_date))
reserving_yearly
reserving_yearly <- reserving_yearly %>%
mutate(accident_month = format(accident_date, '%B'))
triangles <- reserving_yearly %>%
group_by(accident_month, accident_year, development_year) %>%
summarise(size = sum(size)) %>%
ungroup() %>%
complete(grid.expand(accident_month = unique(accident_month), accident_year = 0:10, development_year = 1:11))
triangles <- reserving_yearly %>%
group_by(accident_month, accident_year, development_year) %>%
summarise(size = sum(size)) %>%
ungroup() %>%
complete(expand.grid(accident_month = unique(accident_month), accident_year = 0:10, development_year = 1:11))
triangles
triangles <- reserving_yearly %>%
group_by(accident_month, accident_year, development_year) %>%
summarise(size = sum(size)) %>%
ungroup() %>%
complete(expand.grid(accident_month = unique(accident_month), accident_year = 0:10, development_year = 1:11),
fill = list(size = 0)) %>%
mutate(size = ifelse(accident_year + development_year > 11, NA, size))
triangles
triangles %>% filter(accident_month == 'april')
triangles %>% filter(accident_month == 'april') %>% head(15)
triangles %>% filter(accident_month == 'april') %>% head(22)
triangles %>% filter(accident_month == 'april') %>% head(22) %>% data.frame
triangles %>%
filter(accident_month == 'april') %>%
arrange(development_year) %>%
pivot_wider(names_from = development_year, values_from = size)
?pivot_wider
fit <- glm(size ~ factor(development_year) + factor(accident_year),
data = triangles,
family = poisson(link = 'log'))
fit
fit <- glm(size ~ factor(development_year) * accident_month  + factor(accident_year) * accident_month,
data = triangles,
family = poisson(link = 'log'))
summary(fit)
fit <- glm(size ~ factor(development_year) : accident_month  + factor(accident_year) : accident_month,
data = triangles,
family = poisson(link = 'log'))
summary(fit)
fit <- glm(size ~ factor(development_year) : accident_month  + factor(accident_year) : accident_month,
data = triangles,
family = poisson(link = 'log'))
fit <- glm(size ~ factor(development_year) * accident_month  + factor(accident_year) * accident_month,
data = triangles,
family = poisson(link = 'log'))
summary(fit)
coefficients(fit)
str_detect(fit, 'factor(accident_year)10')
str_detect(coefficients(fit), 'factor(accident_year)10')
coefficients(fit)
str_detect(names(coefficients(fit)), 'factor(accident_year)10')
str_detect(names(coefficients(fit)), fixed('factor(accident_year)10'))
coef_accident_year10 <- str_detect(names(coefficients(fit)), fixed('factor(accident_year)10'))
coef_accident_year10 <- coefficients(fit)[str_detect(names(coefficients(fit)), fixed('factor(accident_year)10'))]
coef_accident_year10
predict(fit, newdata = triangles %>% filter(!is.na(size)), type = 'response')
sum(predict(fit, newdata = triangles %>% filter(!is.na(size)), type = 'response'))
predict
?predict.glm
triangles %>% filter(!is.na(size))
sum(predict(fit, newdata = triangles %>% filter(is.na(size)), type = 'response'))
reserve_group <- sum(predict(fit, newdata = triangles %>% filter(is.na(size)), type = 'response'))
result <- data.frame(method = c('Yearly chain ladder', 'Monthly chain ladder', 'Grouped chain ladder'),
cells = c(12*11/2, 133*132/2, 12*12*11/2),
`reserve estimate` = c(reserve_cl, reserve_cl_month, reserve_group),
error = c(reserve_cl - reserve_actual, reserve_cl_month - reserve_actual, reserve_group - reserve_actual),
`pct error` = c((reserve_cl - reserve_actual) / reserve_actual * 100,
(reserve_cl_month - reserve_actual) / reserve_actual * 100,
(reserve_group - reserve_actual) / reserve_actual * 100))
result
fit <- glm(size ~ factor(development_year) * (accident_month %in% c('april', 'maart', 'mei'))  + factor(accident_year) * (accident_month %in% c('april', 'maart', 'mei')),
data = triangles,
family = poisson(link = 'log'))
triangles$maapme <- triangles$accident_month %in% c('april', 'maart', 'mei')
fit <- glm(size ~ factor(development_year) * (maapme)  + factor(accident_year) * (maapme)),
data = triangles,
family = poisson(link = 'log'))
fit <- glm(size ~ factor(development_year) * maapme  + factor(accident_year) * maapme,
data = triangles,
family = poisson(link = 'log'))
reserve_group <- sum(predict(fit, newdata = triangles %>% filter(is.na(size)), type = 'response'))
reserve_group
model.matrix(as.formula('y ~ x'), data.frame(y = c(1, 2), x = c(3, 4)))
rm(list = ls())
dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dir);
require(tidyverse)
reserving_daily <- readRDS("reserving_data_daily.rds")
reserving_yearly <- readRDS("reserving_data_yearly.rds")
# Inspect data
# Daily data: One record per event: reporting/payment
head(reserving_daily)
# Yearly data: One record per claim per development year
# Outcome variables: close - payment - size
head(reserving_yearly)
# Most claims settle witihn one year
# Most claims are reported after one month
ggplot(data = reserving_daily) +
theme_bw() +
geom_density(aes(reporting_delay, fill = 'reporting delay'),
alpha = .5) +
geom_density(aes(settlement_delay, fill = 'settlement_delay'),
alpha = .5) +
xlab('delay in days') +
xlim(c(0, 1000))
# The data is not yet censored!
max(reserving_daily$payment_date)
# Data for 11 accident years is available
reserving_yearly %>%
filter(development_year == 1) %>%
group_by(accident_year) %>%
summarise(num_claims = n())
# Average number of payments per claim
reserving_daily %>%
group_by(accident_number) %>%
summarise(payments = sum(payment_size > 0)) %>%
ungroup() %>%
summarise(average = mean(payments))
# Censoring the data
observed_daily <- reserving_daily %>%
filter(payment_date <= as.Date('2020-12-31'))
unobserved_daily <- reserving_daily %>%
filter(payment_date > as.Date('2020-12-31'))
observed_yearly <- reserving_yearly %>%
filter(calendar_year <= 10,
reporting_year <= 10)
unobserved_yearly <- reserving_yearly %>%
filter(calendar_year > 10 | reporting_year > 10)
reserve_actual <- sum(unobserved_yearly$size)
reserve_actual
# same result from daily data
sum(unobserved_daily$size)
unobserved_daily
# same result from daily data
sum(unobserved_daily$payment_size)
reserve_actual
unobserved_yearly %>%
mutate(reported = (reporting_year <= 10)) %>%
group_by(reported) %>%
summarise(reserve = sum(size))
observed_yearly %>%
group_by(accident_year, development_year) %>%
summarise(value = sum(size)) %>%
pivot_wider(values_from = value,
names_from = development_year,
names_prefix = 'DY.')
incremental_triangle <- function(data,
rows = 'accident_year',
columns = 'development_year',
variable = 'size',
lower_na = TRUE) {
data_triangle <- data %>%
group_by(!!sym(rows), !!sym(columns)) %>%
summarise(value = sum(!!sym(variable))) %>%
ungroup()
n <- max(data_triangle[, rows])+1
triangle <- matrix(0, nrow = n, ncol = n)
triangle[cbind(data_triangle[[rows]]+1, data_triangle[[columns]])] <- data_triangle$value
if(lower_na) {
triangle[row(triangle) + col(triangle) > n+1] <- NA
}
return(triangle)
}
cumulative_triangle <- function(data,
rows = 'accident_year',
columns = 'development_year',
variable = 'size',
lower_na = TRUE) {
incremental <- incremental_triangle(data, rows, columns, variable, lower_na)
t(apply(incremental, 1, cumsum))
}
cumulative_triangle(observed_data, variable = 'payment')
incremental_triangle(observed_yearly,
variable = 'size',
lower_na = TRUE)
require(ChainLadder)
